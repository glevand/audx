#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Clean FLAC metadata tags using standard rules."
		echo "Usage: ${script_name} [flags] top-dir"
		echo "Option flags:"
		echo "  -a --and     - Apply 'and The' conversions."
		echo "  -f --file    - Apply 'filename' conversions."
		echo "  -h --help    - Show this help and exit."
		echo "  -v --verbose - Verbose execution."
		echo "  -g --debug   - Extra verbose execution."
		echo "  -d --dry-run - Dry run, don't modify files."
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="afhvgd"
	local long_opts="and,file,help,verbose,debug,dry-run"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-a | --and)
			clean_and_the=1
			shift
			;;
		-f | --file)
			clean_filename=1
			shift
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		-d | --dry-run)
			dry_run=1
			shift
			;;
		--)
			shift
			top_dir="${1:-}"
			if [[ ${top_dir} ]]; then
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

clean_tags() {
	local file="${1}"

	if ! flac_check_file "${file}" ''; then
		return
	fi

	declare -A tags
	declare -A new_tags

	flac_fill_tag_set "${file}" tags

	new_tags[ARTIST]="$(str_clean_tag "${tags[ARTIST]}" str_clean_tag_opts)"
	new_tags[ALBUM]="$(str_clean_tag "${tags[ALBUM]}" str_clean_tag_opts)"
	new_tags[TITLE]="$(str_clean_tag "${tags[TITLE]}" str_clean_tag_opts)"
	new_tags[GENRE]="$(str_clean_genre "${tags[GENRE]}" str_clean_tag_opts)"
	new_tags[TRACKNUMBER]="${tags[TRACKNUMBER]}"
	new_tags[TRACKTOTAL]="${tags[TRACKTOTAL]}"
	new_tags[CDDB]="${tags[CDDB]}"

	local need_write=''

	if [[ "${tags[ARTIST]}" != "${new_tags[ARTIST]}" ]]; then
		need_write=1
		if [[ ${verbose} ]]; then
			echo -e "clean ARTIST: '${file}': '${tags[ARTIST]}' -> '${new_tags[ARTIST]}'" >&2
		else
			echo -e "clean ARTIST: '${tags[ARTIST]}' -> '${new_tags[ARTIST]}'" >&2
		fi
	fi

	if [[ "${tags[ALBUM]}" != "${new_tags[ALBUM]}" ]]; then
		need_write=1
		if [[ ${verbose} ]]; then
			echo -e "clean ALBUM: '${file}': '${tags[ALBUM]}' -> '${new_tags[ALBUM]}'" >&2
		else
			echo -e "clean ALBUM: '${tags[ALBUM]}' -> '${new_tags[ALBUM]}'" >&2
		fi
	fi

	if [[ "${tags[TITLE]}" != "${new_tags[TITLE]}" ]]; then
		need_write=1
		if [[ ${verbose} ]]; then
			echo -e "clean TITLE: '${file}': '${tags[TITLE]}' -> '${new_tags[TITLE]}'" >&2
		else
			echo -e "clean TITLE: '${tags[TITLE]}' -> '${new_tags[TITLE]}'" >&2
		fi
	fi

	if [[ "${tags[GENRE]}" != "${new_tags[GENRE]}" ]]; then
		need_write=1
		if [[ ${verbose} ]]; then
			echo -e "clean GENRE: '${file}': '${tags[GENRE]}' -> '${new_tags[GENRE]}'" >&2
		else
			echo -e "clean GENRE: '${tags[GENRE]}' -> '${new_tags[GENRE]}'" >&2
		fi
	fi

	if [[ ${debug} ]]; then
		print_tag_set "${FUNCNAME[0]}: IN:  " "${file}" tags
		if [[ ${need_write} ]]; then
			print_tag_set "${FUNCNAME[0]}: OUT: " "${file}" new_tags
		fi
	fi

	if [[ ${need_write} && ! ${dry_run} ]]; then
		flac_write_tag_set "${file}" new_tags

		if [[ ${verbose} ]]; then
			echo -e "${FUNCNAME[0]}: Wrote '${file}'" >&2
		fi
	fi
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

clean_and_the=''
clean_filename=''
usage=''
verbose=''
debug=''
dry_run=''

process_opts "${@}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'" >&2
	usage
	exit 1
fi

check_top_dir "${top_dir}"
top_dir="$(realpath -e "${top_dir}")"

metaflac="${metaflac:-metaflac}"
check_program "metaflac" "${metaflac}"

declare -A str_clean_tag_opts=()

if [[ ${clean_and_the} ]]; then
	str_clean_tag_opts[and_the]='1'
fi

if [[ ${clean_filename} ]]; then
	str_clean_tag_opts[filename]='1'
fi

readarray -t file_array < <( find "${top_dir}" -type f -name '*.flac' | sort \
	|| { echo "${script_name}: ERROR: files_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
	kill -SIGUSR1 $$; } )

echo "${script_name}: INFO: Processing ${#file_array[@]} files." >&2

for (( i = 0; i < ${#file_array[@]}; i++ )); do
# 	echo "process: '${file_array[i]}'"
	clean_tags "${file_array[i]}"
done

trap "on_exit 'Success'" EXIT
exit 0
