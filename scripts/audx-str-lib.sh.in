#!/usr/bin/env bash
#
# @PACKAGE_NAME@ ${script_name}"
# Version: @PACKAGE_VERSION@"
# Home: @PACKAGE_URL@"
#

audx_str_lib_verbose="${audx_str_lib_verbose:-}"

str_eat_leading_space() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out#"${str_out%%[![:space:]]*}"}"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

str_eat_trailing_space() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out%"${str_out##*[![:space:]]}"}"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_eat_space() {
	local input=(
		'abc'
		'def '
		'ghi	'
		' jkl'
		'	mno'
		'  pqr	'
		'	stu	  '
	)

	audx_str_lib_verbose=1

	local i
	local out

	echo "-- eat_leading_space --" >&2
	for i in "${input[@]}"; do
		str_eat_leading_space "${i}" > /dev/null
	done

	echo "-- eat_trailing_space --" >&2
	for i in "${input[@]}"; do
		str_eat_trailing_space "${i}" > /dev/null
	done
}

str_is_comment() {
	local str="${1}"
	local regex="^[[:space:]]*#"

	if [[ "${str}" =~ ${regex} ]]; then
		return 0
	fi
	return 1
}

test_str_is_comment() {
	local input=(
		'abc'
		'def#'
		'g#hi'
		'#jkl'
		'# mno'
		'  #  pqr'
		'	# stu'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		if str_is_comment "${i}"; then
			echo "${FUNCNAME[0]}: Yes: '${i}'" >&2
		else
			echo "${FUNCNAME[0]}: No:  '${i}'" >&2
		fi
	done
}

str_trim_space() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out//$'\t'/ }"
	str_out="${str_out//$'\n'/}"
	str_out="${str_out//    / }"
	str_out="${str_out//   / }"
	str_out="${str_out//  / }"

	# trim leading space.
	str_out="${str_out#"${str_out%%[![:space:]]*}"}"

	# trim trailing space.
	str_out="${str_out%"${str_out##*[![:space:]]}"}"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_trim_space() {
	local input=(
		'[123 456]'
		'[123  456]'
		'[123   456]'
		'[123  456 ]'
		'[123  456  ]'
		'[ 123  456 ]'
		'[  123       456  ]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_trim_space "${i}" > /dev/null
	done
}

str_clean_colon () {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out// : / - }"
	str_out="${str_out//: / - }"
	str_out="${str_out// :/ - }"
	str_out="${str_out//:/-}"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_colon() {
	local input=(
		'[123:456]'
		'[123: 456]'
		'[123 :456]'
		'[123 : 456]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_colon "${i}" > /dev/null
	done
}

str_clean_parentheses()
{
	local str_in=${1}
	local str_out="${str_in}"

# 	shopt extglob >&2 || :

	local have_extglob
	if shopt -q extglob; then
		have_extglob=1
	else
		have_extglob=''
	fi

	shopt -s extglob

	str_out="${str_out/ (live)/ - Live}"
	str_out="${str_out/ (Live)/ - Live}"
	str_out="${str_out//(+([^\)]))/}"

	if [[ ! ${have_extglob} ]]; then
		shopt -u extglob
	fi

# 	shopt extglob >&2 || :

# 	local regex='([^(]*)(\([^)]*\))(.*)'
# 
# 	if [[ "${str_out}" =~ ${regex} ]]; then
# 		str_out="${BASH_REMATCH[1]}${BASH_REMATCH[3]}"
# 	fi

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_parentheses() {
	local input=(
		'[123 (live)]'
		'[123 (Live)]'
		'[123 (abcd) 456]'
		'[123 (abcd)]'
		'[123 (abcd)(efgh) 456 (ijkl)]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_parentheses "${i}" > /dev/null
	done
}

str_clean_quotes() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out//[‵′‛‘’“”„″‶‟‴‷\`\"]/\'}"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_quotes() {
	local input=(
		'[‵][′][‛][‘][’][“][”][„][″][‶][‟][‴][‷][`]["ABC"]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_quotes "${i}" > /dev/null
	done
}

# Latin: Á áẤ ấĀ́ ā́Ắ ắǺ ǻĄ́ ą́Ǽ ǽB́ b́Ć ćĆ̣ ć̣Ḉ ḉD́ d́É éẾ ếḖ ḗĖ́ ė́Ę́ ę́É̩ é̩ə́ ɚ́F́ f́Ǵ
# ǵH́ h́Í íĪ́ ī́ i̇́Į́ į̇́Ḯ ḯJ́ ȷ́Ḱ ḱĹ ĺḾ ḿŃ ńÓ óỐ ốỚ ớṌ ṍṒ ṓÓ̩ ó̩Ǫ́ ǫ́Ǿ ǿƆ́ ɔ́Ṕ ṕQ́ q́Ŕ
# ŕŚ śṤ ṥT́ t́Ú úǗ ǘỨ ứṸ ṹŪ́ ū́Ų́ ų́V́ v́Ʌ́ ʌ́Ẃ ẃX́ x́Ý ýȲ́ ȳ́Ź ź
#
# Greek: Ά άΈ έΉ ήΊ ί ΐΌ όΎ ύ ΰϓΏ ώ
# Cyrillic: Ѓ ѓЌ ќ
#
# €	‚	ƒ	„	…	†	‡	ˆ
# ‰	Š	‹	Œ	Ž		‘	’
# “	”	•	–	—	˜	™	š
# ›	œ	ž	Ÿ
#
# ¡	¢	£	¤	¥	¦	§	¨
# ©	ª	«	¬	SHY	®	¯
# °	±	²	³	´	µ	¶	·
# ¸	¹	º	»	¼	½	¾	¿
# À	Á	Â	Ã	Ä	Å	Æ	Ç
# È	É	Ê	Ë	Ì	Í	Î	Ï
# Ð	Ñ	Ò	Ó	Ô	Õ	Ö	×
# Ø	Ù	Ú	Û	Ü	Ý	Þ	ß
# à	á	â	ã	ä	å	æ	ç
# è	é	ê	ë	ì	í	î	ï
# ð	ñ	ò	ó	ô	õ	ö	÷
# ø	ù	ú	û	ü	ý	þ	ÿ

str_clean_common() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out//[;‚]/,}"
	str_out="${str_out//[—‒―–‐→|\/\\]/-}"

	str_out="${str_out//[₂]/2}"
	str_out="${str_out//[³]/3}"
	str_out="${str_out//[⁴]/4}"

	str_out="${str_out//[À]/A}"
	str_out="${str_out//[Ç]/C}"
	str_out="${str_out//[É]/E}"
	str_out="${str_out//[Ö]/O}"

	str_out="${str_out//[æàäåáã]/a}"
	str_out="${str_out//[çć]/c}"
	str_out="${str_out//[èéê]/e}"
	str_out="${str_out//[īí]/i}"
	str_out="${str_out//[ł]/l}"
	str_out="${str_out//[ñ]/n}"
	str_out="${str_out//[öóð]/o}"
	str_out="${str_out//[ř]/r}"
	str_out="${str_out//[śš]/s}"
	str_out="${str_out//[Ü]/U}"
	str_out="${str_out//[ü]/u}"
	str_out="${str_out//[ÿ]/y}"
	str_out="${str_out//[ž]/z}"

	str_out="${str_out//…/...}"
	str_out="${str_out//°/ Degrees}"
	str_out="${str_out//[«»]/}"

	str_out="$(str_clean_quotes "${str_out}")"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_common() {
	local input=(
		'[;][‚]'
		'[‵][′][‛][‘][’][“][”][„][″][‶][‟][‴][‷][`]["ABC"]'
		'[—][‒][―][–][‐][→][|][/][\]'
		'[è][é]'
		'[à][ä][å]'
		'[Ö]'
		'[ö]'
		'[ü]'
		'[₂]'
		'[…]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_common "${i}" > /dev/null
	done
}

str_clean_filename() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out//[\$\?\'!,]/}"
	str_out="${str_out//[~*<>‐]/-}"
	str_out="${str_out//#/No. }"
	str_out="${str_out//[+&]/ and }"
	str_out="${str_out//@/ at }"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_filename() {
	local input=(
		'[$][?]['"'"']'
		'[~][*][<][>][‐]'
		'[#777]'
		'[A+B][A&B]'
		'[Sunglasses@Night]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_filename "${i}" > /dev/null
	done
}

str_clean_and_the() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out/ And The / and The }"
	str_out="${str_out/ and the / and The }"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_and_the() {
	local input=(
		'[A And The Bees]'
		'[A and The Bees]'
		'[A and the Bees]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_and_the "${i}" > /dev/null
	done
}

str_clean_phrase() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out// \'n\' / -n- }"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_phrase() {
	local input=(
		"[Rock 'n' Roll]"
		"[Rock 'n' Roll 'n' Rocker]"
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_phrase "${i}" > /dev/null
	done
}

str_clean_disc() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out//[Dd]isk/Disc}"
	str_out="${str_out//[Dd]isc 1/- Disc1}"
	str_out="${str_out//[Dd]isc 2/- Disc2}"
	str_out="${str_out//[Dd]isc 3/- Disc3}"
	str_out="${str_out//[Dd]isc 4/- Disc4}"
	str_out="${str_out//[Dd]isc 5/- Disc5}"
	str_out="${str_out//[Dd]isc 6/- Disc6}"
	str_out="${str_out//-- Disc/- Disc}"
	str_out="${str_out//- - Disc/- Disc}"

	# Album Disc1 -> Album - Disc1
	local regex="^(.*[^-]) (Disc[[:digit:]])"
	if [[ "${str_out}" =~ ${regex} ]]; then
		str_out="${BASH_REMATCH[1]} - ${BASH_REMATCH[2]}"
	fi

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_disc() {
	local input=(
		'[aaa disk 1]'
		'[aaa Disk 1]'
		'[aaa - disk 1]'
		'[aaa - disc 1]'
		'[aaa - Disc 1]'
		'[aaa - Disk 1]'
		'[aaa - Disk1]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_disc "${i}" > /dev/null
	done
}

str_clean_genre() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="${str_out^^}"

	str_out="${str_out//=/}"

	str_out="${str_out//*FOLK*/FOLK}"

	str_out="${str_out//*COUNTRY*/COUNTRY}"
	str_out="${str_out//BLUEGRASS/COUNTRY}"

	str_out="${str_out//*ROCK*/ROCK}"
	str_out="${str_out//*PUNK*/ROCK}"
	str_out="${str_out//*METAL*/ROCK}"

	str_out="${str_out//*BLUES*/BLUES}"
	str_out="${str_out//*R&B*/BLUES}"

	str_out="${str_out//SWING/JAZZ}"
	str_out="${str_out//*JAZZ*/JAZZ}"

	str_out="${str_out//NEW WAVE/POP}"
	str_out="${str_out//*RAP*/POP}"
	str_out="${str_out//TRANCE/POP}"
	str_out="${str_out//DISCO/POP}"
	str_out="${str_out//EASY LISTENING/POP}"
	str_out="${str_out//*POP*/POP}"

	str_out="${str_out//*CLASSICAL*/CLASSICAL}"

	str_out="${str_out//UNKNOWN/}"

	if [[ ${audx_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_genre() {
	local input=(
		'[jazz][Jazz]'
		'[Pop/Rock]'
		'[=]'
		'[Acoustic]'
		'[Acoustic Pop]'
		'[Adult Alternative]'
		'[AOR]'
		'[Bluegrass]'
		'[Blues-Rock]'
		'[Blues/Rock]'
		'[Contemporary Country]'
		'[Crossover Jazz]'
		'[Dream Pop, Indie Pop/Rock]'
		'[Experimental]'
		'[FolkPop]'
		'[=Folk-Rock]'
		'[FOLK ROCK]'
		'[Funk]'
		'[Funk, Urban]'
		'[=General Alternative]'
		'[General Blues]'
		'[General Classical]'
		'[=General Country]'
		'[General Metal]'
		'[General R&B]'
		'[General Reggae]'
		'[Hip-Hop]'
		'[Israeli]'
		'[Jam Rock]'
		'[Jazz Fusion]'
		'[Jazz Vocals]'
		'[J ポップ]'
		'[Lo-Fi]'
		'[Metal]'
		'[misc]'
		'[MOTOWN]'
		'[NuMetal]'
		'[Nu Metal]'
		'[Oldies]'
		'[Pop/Hair Metal]'
		'[Pop&Jazz]'
		'[Pop Vocals]'
		'[Progressive Metal]'
		'[=Progressive Rock]'
		'[Psychedelic Rock]'
		'[Punkedelic]'
		'[Raprock]'
		'[R&B, Soul]'
		'[Rock ]'
		'[Rockabilly]'
		'[Rock/Pop]'
		'[=Rock & Roll]'
		'[Salsa]'
		'[Singer/Songwriter]'
		'[Techno, Trance]'
		'[Traditional Folk]'
		'[Trance]'
	)

	audx_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_genre "${i}" > /dev/null
	done
}

str_clean_tag() {
	# known opts = and_the, filename.
	local str_in=${1}
	local -n _str_clean_tag__opts="${2}"
	local str_out="${str_in}"

	str_out="${str_out//ACDC/AC-DC}"
	str_out="${str_out//AC\/DC/AC-DC}"

	str_out="${str_out//U S A /USA}"
	str_out="${str_out//W M A /WMA}"

	# str_out="${str_out//The Times They Are A‐Changin/The times They are a Changin}"
	# str_out="${str_out//I Dont Want Your Love (Shep Pettibone 7″ mix)/I Dont Want Your Love (Shep Pettibone)}"

	str_out="$(str_clean_parentheses "${str_out}")"
	str_out="$(str_clean_colon "${str_out}")"
	str_out="$(str_clean_disc "${str_out}")"
	str_out="$(str_clean_common "${str_out}")"
	str_out="$(str_clean_phrase "${str_out}")"

	if [[ ${_str_clean_tag__opts[and_the]:-} ]]; then
		str_out="$(str_clean_and_the "${str_out}")"
	fi

	if [[ ${_str_clean_tag__opts[filename]:-} ]]; then
		str_out="$(str_clean_filename "${str_out}")"
	fi

	str_out="$(str_trim_space "${str_out}")"

# 	if [[ ${verbose} && "${str_in}" != "${str_out}" ]]; then
# 		echo "'${str_in}' -> '${str_out}'" >&2
# 	fi

	echo "${str_out}"
}

test_str_clean_tag() {
	local input=(
		'[ACDC]'
		'[AC\/DC]'
	)

	audx_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_tag "${i}" > /dev/null
	done
}

str_clean_all() {
	local str_in=${1}
	local str_out="${str_in}"

	str_out="$(str_clean_parentheses "${str_out}")"
	str_out="$(str_clean_colon "${str_out}")"
	str_out="$(str_clean_common "${str_out}")"
	str_out="$(str_clean_phrase "${str_out}")"
	str_out="$(str_clean_disc "${str_out}")"
	str_out="$(str_clean_filename "${str_out}")"
	str_out="$(str_trim_space "${str_out}")"

	if [[ ${audx_str_lib_verbose} && "${str_in}" != "${str_out}" ]]; then
		echo "${FUNCNAME[0]}: '${str_in}' => '${str_out}'" >&2
	fi

	echo "${str_out}"
}

test_str_clean_all() {
	local input=(
		'[Remember Rock '"'"'n'"'"' Roll Radio? disk 5]'
	)

	audx_str_lib_verbose=1

	local i
	for i in "${input[@]}"; do
		str_clean_all "${i}" > /dev/null
	done
}
