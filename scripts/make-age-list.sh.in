#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace
	{
		echo "${script_name} - Make age lists of an album collection."
		echo "Usage: ${script_name} [flags] src-directory [src-directory]..."
		echo "Option flags:"
		echo "  -o --output-dir - Output directory. Default: '${output_dir}'."
		echo "  -t --tracks     - Output an album track list. Default: '${tracks}'."
		echo "  -c --config     - Configuration file. Default: '${config_file}'."
		echo "  -h --help       - Show this help and exit."
		echo "  -v --verbose    - Verbose execution."
		echo "  -g --debug      - Extra verbose execution."
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="o:tc:hvg"
	local long_opts="output-dir:,tracks,config:,help,verbose,debug"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-o | --output-dir)
			output_dir="${2}"
			shift 2
			;;
		-t | --tracks)
			tracks=1
			shift
			;;
		-c | --config)
			config_file="${2}"
			shift 2
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		--)
			shift
			if [[ ${1:-} ]]; then
				src_dirs=("$@")
			fi
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

generate_age_list() {
	local list_type=${1}

	local name_exp
	local grep_exp

	case "${list_type}" in
	'albums')
		name_exp='01-*.flac'
		grep_exp='[[:digit:]]{4}(\.[[:digit:]]{2}){2} .*/01-'
		;;
	'tracks')
		name_exp='*.flac'
		grep_exp='[[:digit:]]{4}(\.[[:digit:]]{2}){2} .*.flac$'
		;;
	*)
		echo "${script_name}: ERROR: Internal - Bad list_type: '${list_type}'" >&2
		exit 1
		;;
	esac

	local src_dir
	local output_file
	local src_path

	for src_dir in "${src_dirs[@]}"; do
		src_dir="${src_dir%/}"
		output_file="${output_dir}/${src_dir##*/}-${list_type}-age.lst"
		src_path="$(realpath "${src_dir}")"

		if [[ -n "$(find "${src_dir}" -maxdepth 0 -type d -empty 2>/dev/null)" ]]; then
			echo "${script_name}: INFO: Empty directory: '${src_dir}'" >&2
			continue
		fi

		if [[ -z "$(find "${src_dir}" -type f -name "${name_exp}" -print -quit 2>/dev/null)" ]]; then
			echo "${script_name}: INFO: No files found: '${src_dir}'" >&2
			continue
		fi

		declare -a files_array
		readarray -t files_array < <( (cd "${src_dir}" \
			&& find . -type f -name "${name_exp}" -exec ls -l --time-style='+%Y.%m.%d' {} \;) \
			| grep -E --only-matching "${grep_exp}" \
			| sort \
			|| { echo "${script_name}: ERROR: files_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
			kill -SIGUSR1 $$; } )

		{
			echo "# ${script_name} (@PACKAGE_NAME@) - ${start_time}"
			echo "# ${src_dir}: ${#files_array[@]} albums."
			echo ''
		} > "${output_file}"

		verbose_echo "${script_name}: INFO: Processing ${#files_array[@]} files." >&2
		verbose_echo "src = '${src_dir}'"
		verbose_echo "out = '${output_file}'"

		local file
		local txt
		for file in "${files_array[@]}"; do
			# 2007.04.21 ./Michael Franks/Skin Dive/01-Read My Lips.flac
			if [[ "${list_type}" == 'tracks' ]]; then
				txt="${file:0:11}'${file:13}'"
			else
				txt="${file:0:11}'${file:13:-4}'"
			fi

			if [[ ${verbose} ]]; then
				echo "${txt}"
			fi
			echo "${txt}" >> "${output_file}"
		done
		verbose_echo
	done
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

declare -a src_dirs

output_dir="/tmp/audx-age-${start_time}"
tracks=''
config_file_default="${HOME}/.audx.conf"
config_file="${config_file_default}"
usage=''
verbose=''
debug=''
src_dirs=''

process_opts "${@}"

if [[ "${config_file}" != "${config_file_default}" ]]; then
	check_file '--config file' "${config_file}"
fi

if [[ -f "${config_file}" ]]; then
	source "${config_file}"
fi

if [[ ! ${src_dirs} ]]; then
	src_dirs=( "${collection_top}"/* )
	echo "${script_name}: INFO: No source directories given. Using '${src_dirs[@]}'" >&2
fi

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

output_dir="$(realpath --canonicalize-missing "${output_dir}")"

check_src_dirs "${src_dirs[@]}"

mkdir -p "${output_dir}"

generate_age_list 'albums'

if [[ ${tracks} ]]; then
	generate_age_list 'tracks'
fi

echo "${script_name}: Age lists generated in '${output_dir}'."  >&2
trap $'on_exit "Success"' EXIT
exit 0
