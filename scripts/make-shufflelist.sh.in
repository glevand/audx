#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Create an M3U playlist of random albums."
		echo "Usage: ${script_name} [flags] top-dir"
		echo 'Option flags:'
		echo "  -a --all         - Put all albums found in playlist. Default: '${all}'."
		echo "  -c --count       - Number of albums in playlist. Default: '${count}'."
		echo "  -o --output-file - Shuffle list output file. Default: '${out_file}'."
		echo "  -s --start-date  - Starting date. Default: '${start_date}'."
		echo "  -e --end-date    - Ending date. Default: '${end_date}'."
		echo "  -h --help        - Show this help and exit."
		echo "  -v --verbose     - Verbose execution."
		echo "  -g --debug       - Extra verbose execution."
		echo 'Inputs:'
		echo "  top-dir          - '${top_dir}'"
		echo 'Date Specifiers:'
		echo "  '2 days ago'"
		echo "  '3 months ago'"
		echo "  'last week'"
		echo "  'last Thursday'"
		echo 'Info:'
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="ac:o:s:e:hvg"
	local long_opts="all,count:,output-file:,start-date:,end-date:,help,verbose,debug"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-a | --all)
			all=1
			count=''
			shift
			;;
		-c | --count)
			all=''
			count="${2}"
			shift 2
			;;
		-o | --output-file)
			out_file="${2}"
			shift 2
			;;
		-s | --start-date)
			start_date="${2}"
			shift 2
			;;
		-e | --end-date)
			end_date="${2}"
			shift 2
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		--)
			shift
			if [[ ${1:-} ]]; then
				top_dir="${1}"
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

test_album_file() {
	local album_file="${1}"
	local start="${2}"
	local end="${3}"

# 	echo "" >&2
# 	echo "${FUNCNAME[0]}>------------------------" >&2
# 	echo "${FUNCNAME[0]}: album  = '${album_file}'" >&2
# 	echo "${FUNCNAME[0]}: start  = '${start}'" >&2
# 	echo "${FUNCNAME[0]}: end    = '${end}'" >&2

	local first_file
	first_file="$(find_first_file "${album_file%/*}" "${start}" "${end}" '')"

	if [[ ${first_file} ]]; then
		if [[ ${verbose} ]]; then
			echo "${FUNCNAME[0]}: Add '${album_file}'" >&2
		fi
		echo "${album_file}"
	fi

# 	echo "${FUNCNAME[0]}: out = @${first_file}@" >&2
# 	echo "${FUNCNAME[0]}<------------------------" >&2
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

all=''
count='6'
out_file="/tmp/audx-shufflelist-${start_time}.m3u"
start_date=''
end_date=''
usage=''
verbose=''
debug=''

m3u_file="${m3u_file:-album.m3u}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

top_dir="${top_dir:-${collection_top:-}}"

process_opts "${@}"

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'" >&2
	usage
	exit 1
fi

top_dir="$(realpath --canonicalize-existing "${top_dir}")"

print_project_banner >&2

parallel="${parallel:-parallel}"
check_program "parallel" "${parallel}"

shuf="${shuf:-shuf}"
check_program "shuf" "${shuf}"

check_top_dir "${top_dir}"
top_dir="$(realpath -e "${top_dir}")"

if [[ ! ${all} ]]; then
	check_if_positive '--count' "${count}"
fi

start_date="${start_date:-$(date --date="Jan 1 1900")}"
start_date="$(date --date="${start_date}" '+%Y-%m-%d %H:%M:%S')"

end_date="${end_date:-$(date --date="tomorrow")}"
end_date="$(date --date="${end_date}" +'%Y-%m-%d %H:%M:%S')"

if [[ "${start_date}" > "${end_date}" ]]; then
	echo "${script_name}: ERROR: Bad dates." >&2
	echo "${script_name}: ERROR: Start date = '${start_date}'." >&2
	echo "${script_name}: ERROR: End date   = '${end_date}'." >&2
	exit 1
fi

if [[ ${verbose} ]]; then
	echo "INFO: Start date = '${start_date}'." >&2
	echo "INFO: End date   = '${end_date}'." >&2
fi

readarray -t album_array < <( \
	find "${top_dir}" -type f -name "${m3u_file}" -print \
	|| { echo "${script_name}: ERROR: album_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
	kill -SIGUSR1 $$; } )

if (( ${#album_array[@]} == 0 )); then
	echo "INFO: No M3U album files found: '${top_dir}'" >&2
	trap "on_exit 'Success'" EXIT
	exit 0
fi

echo "INFO: Considering ${#album_array[@]} albums." >&2

extra_verbose=''

if [[ ${extra_verbose} ]]; then
	{
		echo
		echo "--- album array ---"
		for (( i = 0; i < ${#album_array[@]}; i++ )); do
			echo "${i}: '${album_array[i]}'"
		done
		echo "--- album array ---"
		echo
	} >&2
fi

export -f find_first_file
export -f test_album_file

readarray -t good_array < <( \
	parallel test_album_file {} "'${start_date}'" "'${end_date}'" ::: "${album_array[@]}" \
	|| { echo "${script_name}: ERROR: good_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
	kill -SIGUSR1 $$; } )
good_count="${#good_array[@]}"

unset album_array

echo "INFO: Found ${good_count} eligible albums." >&2

if [[ ${all} ]]; then
	count=${good_count}
fi

if [[ ${verbose} ]]; then
	{
		echo
		echo "--- good array ---"
		for (( i = 0; i < ${good_count}; i++ )); do
			echo "${i}: '${good_array[i]}'"
		done
		echo "--- good array ---"
		echo
	} >&2
fi

if (( ${good_count} < ${count} )); then
	echo "${script_name}: ERROR: Not enough albums to fill playlist: (${good_count} < ${count})." >&2
	exit 1
fi

make_m3u_header "AUDX Shuffle List - ${start_time}" 'Various' "$(date +%Y.%m.%d)" '' '' '' > "${out_file}"

for (( i = 0; i < ${count}; i++ )); do
	for (( j = 0; ; j++ )); do
		rand="$("${shuf}" -n1 -i0-${good_count})"

		# echo "good_count = ${good_count}, j = ${j}" >&2

		if [[ -v good_array[rand] ]]; then
			# echo "good rand = ${rand} = '${good_array[rand]}'" >&2
			break
		fi

		# echo "bad rand = ${rand}" >&2

		if (( j > (good_count * good_count) )); then
			echo "${script_name}: INTERNAL ERROR: random loop." >&2
			exit 1
		fi
	done

	album_file="${good_array[rand]}"
	album_dir="${good_array[rand]%/*}"
	unset good_array[rand]

	declare -A triple
	path_to_artist_album_title "${album_file}" triple

	echo "$(( i + 1 )): ${triple[ARTIST]} -- ${triple[ALBUM]}" >&2

	echo "${album_file}" >> "${out_file}"
done

echo "INFO: Playlist in '${out_file}'" >&2

trap "on_exit 'Success'" EXIT
exit 0
