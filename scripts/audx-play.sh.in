#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Play AAC encoded M4A files."
		echo "Usage: ${script_name} [flags] <top-dir | M3U playlist | M4A file>"
		echo "Option flags:"
		echo "  -h --help        - Show this help and exit."
		echo "  -v --verbose     - Verbose execution. Default: '${verbose}'."
		echo "  -g --debug       - Extra verbose execution. Default: '${debug}'."
		echo 'Input:'
		case "${input_type}" in
		m4a_file)
			echo "  m4a file: '${arg_1}'"
			;;
		playlist)
			echo "  playlist: '${arg_1}'"
			;;
		top_dir)
			echo "  top-dir: '${arg_1}'"
			;;
		esac
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="hvg"
	local long_opts="help,verbose,debug,recurse-count:"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			keep_tmp_dir=1
			set -x
			shift
			;;
		--recurse-count)
			recurse_count="${2}"
			shift 2
			;;
		--)
			shift
			arg_1="${1:-}"
			if [[ ${arg_1} ]]; then
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

last_int=0
on_sigint() {
	local now="$(( SECONDS + 1 ))"
	local delta="$(( now - last_int ))"

	echo

	if [[ ${debug} ]]; then
		echo "${FUNCNAME[0]}: ${now} - ${last_int} = ${delta}" >&2
	fi

	if (( delta < 2 )); then
		echo "${script_name}: Terminating." >&2
		trap - EXIT
		exit 0
	fi
	last_int="${now}"
}

print_playing() {
	local artist=${1}
	local album=${2}
	local date=${3}
	local fall_back=${4}
	local -n _print_playing__term_line="${5}"

	echo
	if [[ ${artist} && ${album} && ${date} ]]; then
		str="Playing: ${artist}, ${album} (${date})"
	elif [[ ${artist} && ${album} ]]; then
		str="Playing: ${artist}, ${album}"
	elif [[ ${artist} ]]; then
		str="Playing: ${artist}"
	elif [[ ${album} ]]; then
		str="Playing: ${album}"
	else
		str="Playing: ${fall_back}"
	fi
	echo "${str}"
	_print_playing__term_line="${str//[[:print:]]/-}"
	echo "${_print_playing__term_line}"
}

print_tracks() {
	local -n _print_tracks__tracks_array="${1}"
	local files_prefix="${2}"
	local term_line=${3}

	local in_count="${#_print_tracks__tracks_array[@]}"

	local id
	local file
	local ext

	for (( id = 1; id <= ${in_count}; id++ )); do
		file="${_print_tracks__tracks_array[$(( id - 1 ))]}"
		ext="${file##*.}"

#		echo "${id}/${in_count}: '${file}'"

		local title
		if [[ "${ext}" = 'm4a' ]]; then
			title="$(m4a_get_tag 'TITLE' "${files_prefix}${file}" 'required')"
			echo "${id}/${in_count}: ${title}"
		elif [[  "${ext}" = 'flac' ]]; then
			title="$(flac_get_tag 'TITLE' "${files_prefix}${file}" 'required')"
			echo "${id}/${in_count}: ${title}"
		else
			echo "${id}/${in_count}: Unknown file type '${files_prefix}${file}'." >&2
		fi
	done
	echo "${term_line}"
	echo
}

play_tracks() {
	local -n _play_tracks__tracks_array="${1}"
	local files_prefix="${2}"

	local in_count="${#_play_tracks__tracks_array[@]}"

	if [[ ${#_play_tracks__tracks_array[@]} == 0 ]]; then
		echo "${script_name}: INFO: No input files found." >&2
		return
	fi

	if [[ ${verbose} ]]; then
		echo "${script_name}: Playing ${in_count} input files."
	fi

	local id
	local file
	local ext
	local -A tags

	for (( id = 1; id <= ${in_count}; id++ )); do
		file="${_play_tracks__tracks_array[$(( id - 1 ))]}"
		ext="${file##*.}"

		if [[ "${ext}" = 'm4a' ]]; then
			m4a_fill_tag_set "${files_prefix}${file}" tags
			echo "${id}/${in_count}: ${tags[ARTIST]}, ${tags[ALBUM]}, ${tags[TITLE]}"
			${ffplay} -loglevel quiet -nodisp -autoexit "${files_prefix}${file}" > /dev/null || :
		elif [[  "${ext}" = 'flac' ]]; then
			flac_fill_tag_set "${files_prefix}${file}" tags
			echo "${id}/${in_count}: ${tags[ARTIST]}, ${tags[ALBUM]}, ${tags[TITLE]}"
			${sox} --no-show-progress "${files_prefix}${file:?}" -d
		else
			echo "${id}/${in_count}: Unknown file type '${files_prefix}${file}'." >&2
		fi
	done
}

play_file() {
	local in_file="${1}"

	check_file 'input file' "${in_file}"

	local -a tracks_array=("${in_file}")

	local -A tags
	fill_tag_set "${in_file}" tags

	local term_line
	print_playing "${tags[ARTIST]}" "${tags[ALBUM]}" "${tags[DATE]}" "'${in_file}'" term_line
	play_tracks tracks_array '' "${term_line}"
}

play_playlist() {
	local playlist_file="${1}"

	check_file 'playlist' "${playlist_file}"

	local -a lines_array
	local -a tracks_array=()

	readarray -t lines_array < "${playlist_file}"

	local line_count="${#lines_array[@]}"
	local artist=''
	local album=''
	local date=''

	for (( id = 1; id <= ${line_count}; id++ )); do
		line="${lines_array[$(( id - 1 ))]}"

		if [[ "${line::1}" = '#' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (comment) = '${line}'" >&2
			fi
			if [[ "${line::8}" = '#EXTART:' ]]; then
				artist="${line:9}"
			fi
			if [[ "${line::8}" = '#EXTALB:' ]]; then
				album="${line:9}"
			fi
			if [[ "${line::9}" = '#EXTDATE:' ]]; then
				date="${line:10}"
			fi
			continue
		fi

		if [[ ! "${line}" ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (blank) = '${line}'" >&2
			fi
			continue
		fi

		if [[ "${line: -4:4}" = '.m4a' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (m4a track) = '${line}'" >&2
			fi

			tracks_array=("${tracks_array[@]}" "${line}")
			continue
		fi

		if [[ "${line: -5:5}" = '.flac' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (flac track) = '${line}'" >&2
			fi

			tracks_array=("${tracks_array[@]}" "${line}")
			continue
		fi

		if [[ "${line: -4:4}" = '.m3u' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (playlist) = '${line}'" >&2
			fi

			"${SCRIPT_TOP}/${script_name}" ${verbose:+--verbose} ${debug:+--debug} --recurse-count="$(( recurse_count + 1 ))" "${line}"
			continue
		fi

		echo "${script_name}: ERROR: ${id}: Unknown line type: '${line}'." >&2
	done

	if [[ ! "${tracks_array[@]}" ]]; then
		return
	fi

	if [[ -f "${tracks_array[0]}" ]]; then
		files_prefix=''
	elif [[ -f "${playlist_file%/*}/${tracks_array[0]}" ]]; then
		files_prefix="${playlist_file%/*}/"
	else
		echo "${script_name}: ERROR: Unknown files_prefix: playlist = '${playlist_file}', track = '${tracks_array[0]}'" >&2
	fi

	local term_line
	print_playing "${artist}" "${album}" "${date}" "'${playlist_file}'" term_line
	print_tracks  tracks_array "${files_prefix}" "${term_line}"
	play_tracks tracks_array "${files_prefix}"
}

play_top_dir() {
	local top_dir="${1}"

	check_top_dir "${top_dir}"

	local -a tracks_array

	readarray -t tracks_array < <(find "${top_dir}" -type f -name '*.flac' -o -name '*.m4a' | sort \
		|| { echo "${script_name}: ERROR: tracks_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
		kill -SIGUSR1 $$; } )

	local -A tags

	if [[ ${#tracks_array[@]} != 0 ]]; then
		local term_line

		fill_tag_set "${tracks_array[0]}" tags
		print_playing "${tags[ARTIST]}" "${tags[ALBUM]}" "${tags[DATE]}" "'${top_dir}'" term_line
		print_tracks  tracks_array '' "${term_line}"
	fi

	play_tracks tracks_array ''
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"
script_name="${real_source##*/}"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1
trap 'on_sigint' SIGINT

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

usage=''
verbose=''
debug=''
recurse_count=''
arg_1=''

process_opts "${@}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

input_type=''

if [[ -d "${arg_1}" ]]; then
	input_type='top_dir'
elif [[ -f "${arg_1}" && "${arg_1##*.}" == 'm3u' ]]; then
	input_type='playlist'
elif [[ -f "${arg_1}" && "${arg_1##*.}" == 'm4a' ]]; then
	input_type='m4a_file'
elif [[ -f "${arg_1}" && "${arg_1##*.}" == 'flac' ]]; then
	input_type='flac_file'
fi

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

print_project_banner

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'." >&2
	usage
	exit 1
fi

if [[ ${verbose} ]]; then
	echo "${script_name}: INFO: Recurse count = '${recurse_count}'."
fi

if (( recurse_count > 5 )); then
	echo "${script_name}: ERROR: Hit recurse_count: '${recurse_count}'" >&2
	exit 1
fi

exiftool="${exiftool:-exiftool}"
check_program "exiftool" "${exiftool}"

ffplay="${ffplay:-ffplay}"
check_program "ffplay" "${ffplay}"

sox="${sox:-sox}"
check_program "sox" "${sox}"

metaflac="${metaflac:-metaflac}"
check_program "metaflac" "${metaflac}"

if [[ ! ${arg_1} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: No input files." >&2
	usage
	exit 1
fi

arg_1="$(realpath -e "${arg_1}")"

case "${input_type}" in
flac_file | m4a_file)
	play_file "${arg_1}"
	;;
playlist)
	play_playlist "${arg_1}"

	;;
top_dir)
	play_top_dir "${arg_1}"
	;;
*)
	echo "${script_name}: ERROR: Unknown input type: '${arg_1}'" >&2
	usage
	exit 1
	;;
esac

trap "on_exit 'Success'" EXIT
exit 0
