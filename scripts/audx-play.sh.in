#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Play FLAC and AAC encoded M4A files."
		echo "Usage: ${script_name} [flags] <top-dir | M3U playlist | M4A file | FLAC file>"
		echo "Option flags:"
		echo "  -s --state-dir   - State directory. Default: '${state_dir}'."
		echo "  -h --help        - Show this help and exit."
		echo "  -v --verbose     - Verbose execution. Default: '${verbose}'."
		echo "  -g --debug       - Extra verbose execution. Default: '${debug}'."
		echo 'Input:'
		case "${input_type}" in
		m4a_file)
			echo "  m4a file: '${arg_1}'"
			;;
		playlist)
			echo "  playlist: '${arg_1}'"
			;;
		top_dir)
			echo "  top-dir: '${arg_1}'"
			;;
		esac
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="s:hvg"
	local long_opts="state-dir:,help,verbose,debug,recurse-count:"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-s | --state-dir)
			state_dir="${2}"
			shift 2
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			keep_tmp_dir=1
			set -x
			shift
			;;
		--recurse-count)
			recurse_count="${2}"
			shift 2
			;;
		--)
			shift
			arg_1="${1:-}"
			if [[ ${arg_1} ]]; then
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

on_sigint() {
	local now="$(( SECONDS + 1 ))"
	local delta="$(( now - last_int ))"

	echo

	if [[ ${debug} ]]; then
		echo "${FUNCNAME[0]}: ${now} - ${last_int} = ${delta}" >&2
	fi

	if (( delta < 2 )); then
		echo "${script_name}: Terminating." >&2
		trap - EXIT
		exit 0
	fi
	last_int="${now}"
	got_sig_int=1
}

write_state() {
	local state_file="${1}"
	local playlist_file="${2}"
	local entry="${3}"

	if [[ ! -f "${state_file}" ]]; then
		{
			echo '# AUDX state file'
			if [[ ! -z "${playlist_file}" ]]; then
				echo "# playlist: ${playlist_file}"
			fi
			echo "# state: ${state_file##*/}"
			echo
		} > "${state_file}"
	fi
	echo "${entry}" >> "${state_file}"
}

get_total_duration() {
	local track_count="${1}"
	local -n _total_duration__tags_array="${2}"

	local minutes='0'
	local seconds='0'
	local regex='([[:digit:]]*):([[:digit:]]*)'

	local id
	local tag
	local match

	for (( id = 1; id <= ${track_count}; id++ )); do
		tag="${_total_duration__tags_array[${id},duration]}"

		if [[ ! "${tag}" =~ ${regex} ]]; then
			echo "${FUNCNAME[0]}: ERROR: No match '${tag}'" >&2
			exit 1
		fi

		match="${BASH_REMATCH[1]##+(0)}"
#		echo "match-s = '${match}'" >&2

		minutes="$(( minutes + match ))"

		match="${BASH_REMATCH[2]##+(0)}"
#		echo "match-m = '${match}'" >&2

		seconds="$(( seconds + match ))"

#		echo "${minutes}:${seconds}" >&2
	done

	local min_sec="$(sec_to_min_sec "${seconds}")"

	if [[ ! "${min_sec}" =~ ${regex} ]]; then
		echo "${FUNCNAME[0]}: ERROR: No match '${min_sec}'" >&2
		exit 1
	fi

	minutes="$(( minutes + BASH_REMATCH[1] ))"
	seconds="${BASH_REMATCH[2]}"

# 	echo "------" >&2
# 	echo "${minutes}:${seconds}" >&2

	echo "${minutes}:${seconds}"
}

get_tags_array() {
	local -n _get_tags_array__tracks_array="${1}"
	local -n _get_tags_array__tags_array="${2}"

	local track_count="${#_get_tags_array__tracks_array[@]}"

	local id

	for (( id = 1; id <= ${track_count}; id++ )); do
		local file
		local -A file_tags
		local duration

		file="${_get_tags_array__tracks_array[$(( id - 1 ))]}"

		_get_tags_array__tags_array[${id},id]="${id}"
		_get_tags_array__tags_array[${id},file]="${file}"
		_get_tags_array__tags_array[${id},ext]="${file##*.}"

		if [[ "${_get_tags_array__tags_array[${id},ext]}" = 'm4a' ]]; then

			m4a_fill_tag_set "${file}" file_tags

			# 'Duration       : 0:06:33'
			# 'Duration          : 9.91 s'

			duration="$("${exiftool}" -Duration "${file}" 2>/dev/null || :)"
			duration="${duration#*: }"

			if [[ "${duration:(-1)}" == 's' ]]; then
# 				echo "seconds: ${duration}"
				duration="${duration% s}"
				local test="${duration#*.}"
				duration="${duration%.*}"

				test="${test:(-2):1}"
				if (( test > 5 )); then
					duration="$(( duration + 1 ))"
				fi
				duration="0:${duration}"
			else
# 				echo "minutes: ${duration}"
				duration="${duration#0:0}"
			fi
# 			echo "duration = '${duration}'"

		elif [[  "${_get_tags_array__tags_array[${id},ext]}" = 'flac' ]]; then

			flac_fill_tag_set "${file}" file_tags

			local samples="$(${metaflac} --show-total-samples "${file}")"
			local rate="$(${metaflac} --show-sample-rate "${file}")"

			duration="$(( samples / rate))"
			duration="$(sec_to_min_sec "${duration}")"

		else
			echo "${_get_tags_array__tags_array[${id},id]}/${track_count}: Unknown file type: '"${file}"'." >&2
			continue
		fi

		_get_tags_array__tags_array[${id},duration]="${duration}"

		_get_tags_array__tags_array[${id},ARTIST]="${file_tags[ARTIST]}"
		_get_tags_array__tags_array[${id},ALBUM]="${file_tags[ALBUM]}"
		_get_tags_array__tags_array[${id},TITLE]="${file_tags[TITLE]}"
		_get_tags_array__tags_array[${id},DATE]="${file_tags[DATE]}"

# 		_get_tags_array__tags_array[${id},GENRE]="${file_tags[GENRE]}"
# 		_get_tags_array__tags_array[${id},TRACKNUMBER]="${file_tags[TRACKNUMBER]}"
# 		_get_tags_array__tags_array[${id},TRACKTOTAL]="${file_tags[TRACKTOTAL]}"
# 		_get_tags_array__tags_array[${id},CDDB]="${file_tags[CDDB]}"
# 		_get_tags_array__tags_array[${id},DISCID]="${file_tags[DISCID]}"
	done

# 	echo >&2
# 	for key in "${!_get_tags_array__tags_array[@]}"; do
# 		echo -e "key = @${key}@, \t@${_get_tags_array__tags_array[${key}]}@" >&2
# 	done

# 	echo >&2
# 	for (( id = 1; id <= ${track_count}; id++ )); do
# 		echo "${id}/${track_count}:" >&2
# 		echo "  file     = @${_get_tags_array__tags_array[${id},file]}@" >&2
# 		echo "  ARTIST   = @${_get_tags_array__tags_array[${id},ARTIST]}@" >&2
# 		echo "  ALBUM    = @${_get_tags_array__tags_array[${id},ALBUM]}@" >&2
# 		echo "  DATE     = @${_get_tags_array__tags_array[${id},DATE]}@" >&2
# 		echo "  TITLE    = @${_get_tags_array__tags_array[${id},TITLE]}@" >&2
# 		echo "  duration = @${_get_tags_array__tags_array[${id},duration]}@" >&2
# 		echo >&2
# 	done
}

print_playing() {
	local artist=${1}
	local album=${2}
	local date=${3}
	local duration=${4}
	local fall_back=${5}
	local -n _print_playing__term_line="${6}"

	local str
	if [[ ${artist} && ${album} && ${date} ]]; then
		str="Playing: ${artist}, ${album} - ${date} (${duration})"
	elif [[ ${artist} && ${album} ]]; then
		str="Playing: ${artist}, ${album} (${duration})"
	elif [[ ${artist} ]]; then
		str="Playing: ${artist} (${duration})"
	elif [[ ${album} ]]; then
		str="Playing: ${album} (${duration})"
	else
		str="Playing: ${fall_back} (${duration})"
	fi

	_print_playing__term_line="${str//[[:print:]]/-}"

	echo
	echo "${str}"
	echo "${_print_playing__term_line}"
}

print_tracks() {
	local -n _print_tracks__tags_array="${1}"
	local track_count="${2}"
	local print_artist="${3}"
	local term_line=${4}

	local id
	for (( id = 1; id <= ${track_count}; id++ )); do
		if [[ ${print_artist} ]]; then
			echo "${id}/${track_count}: ${_print_tracks__tags_array[${id},ARTIST]}, ${_print_tracks__tags_array[${id},TITLE]} (${_print_tracks__tags_array[${id},duration]})"
		else
			echo "${id}/${track_count}: ${_print_tracks__tags_array[${id},TITLE]} (${_print_tracks__tags_array[${id},duration]})"
		fi
	done

	echo "${term_line}"
	echo
}

play_tracks() {
	local -n _play_tracks__tracks_array="${1}"
	local -n _play_tracks__tags_array="${2}"
	local state_file="${3}"
	local playlist_file="${4}"

	local track_count="${#_play_tracks__tracks_array[@]}"

	if [[ ${track_count} == 0 ]]; then
		echo "${script_name}: INFO: No input files found." >&2
		return
	fi

	if [[ ${verbose} ]]; then
		echo "${script_name}: Playing ${track_count} input files."
	fi

	local -a state_array=()

	if [[ -f "${state_file}" ]]; then
		readarray -t state_array < "${state_file}"
	fi

	local id
	for (( id = 1; id <= ${track_count}; id++ )); do

		local file=${_play_tracks__tags_array[${id},file]}
		local file_name="${file##*/}"

		if find_array_line state_array "${file_name}"; then
			continue
		fi

		echo "${id}/${track_count}: ${_play_tracks__tags_array[${id},ARTIST]}, ${_play_tracks__tags_array[${id},TITLE]} (${_play_tracks__tags_array[${id},duration]})"

		if [[ "${_play_tracks__tags_array[${id},ext]}" = 'm4a' ]]; then
			if [[ ! ${silent_test:-} ]]; then
				${ffplay} -loglevel quiet -nodisp -autoexit "${file}" > /dev/null || :
			fi
		elif [[  "${_play_tracks__tags_array[${id},ext]}" = 'flac' ]]; then
			if [[ ! ${silent_test:-} ]]; then
				${sox} --no-show-progress "${file:?}" -d
			fi
		else
			echo "${id}/${track_count}: Unknown file type '${file}'." >&2
		fi

		if [[ ${got_sig_int} ]]; then
			got_sig_int=''
		elif [[ "${state_file}" ]]; then
			if [[ "${verbose}" ]]; then
				echo "Add state: '${file_name}'" >&2
			fi
			write_state "${state_file}" "${playlist_file}" "${file_name}"
		fi
	done

	if [[ -f "${state_file}" ]]; then
		rm "${state_file}"
	fi

	echo
}

play_file() {
	local in_file="${1}"

	check_file 'input file' "${in_file}"

	local -a tracks_array=("${in_file}")

	local -A tags_array
	get_tags_array tracks_array tags_array

	local duration
	duration="$(get_total_duration '1' tags_array)"

	local term_line
	print_playing "${tags_array[1,ARTIST]}" "${tags_array[1,ALBUM]}" "${tags_array[1,DATE]}" "${duration}" "'${in_file}'" term_line

	play_tracks tracks_array tags_array '' ''
}

play_playlist() {
	local playlist_file="${1}"
	local state_file="${2}"

	playlist_file="$(realpath -es "${playlist_file}")"

	check_file 'playlist' "${playlist_file}"

	local -a lines_array
	local -a tracks_array=()
	local -a state_array=()

	if [[ -f "${state_file}" ]]; then
		readarray -t state_array < "${state_file}"
	fi

	readarray -t lines_array < "${playlist_file}"

	local line_count="${#lines_array[@]}"
	local artist=''
	local album=''
	local date=''

	for (( id = 1; id <= ${line_count}; id++ )); do
		local line="${lines_array[$(( id - 1 ))]}"

		if [[ "${line::1}" = '#' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (comment) = '${line}'" >&2
			fi
			if [[ "${line::8}" = '#EXTART:' ]]; then
				artist="${line:9}"
			fi
			if [[ "${line::8}" = '#EXTALB:' ]]; then
				album="${line:9}"
			fi
			if [[ "${line::9}" = '#EXTDATE:' ]]; then
				date="${line:10}"
			fi
			continue
		fi

		if [[ ! "${line}" ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (blank) = '${line}'" >&2
			fi
			continue
		fi

		if [[ "${line: -4:4}" = '.m4a' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (m4a track) = '${line}'" >&2
			fi

			if [[ -f "${line}" ]]; then
				tracks_array=("${tracks_array[@]}" "${line}")
			elif [[ -f "${playlist_file%/*}/${line}" ]]; then
				tracks_array=("${tracks_array[@]}" "${playlist_file%/*}/${line}")
			else
				{
					echo "${script_name}: ERROR: Bad m4a entry, line ${id}:"
					echo "   playlist = '${playlist_file}'"
					echo "   entry    = '${line}'"
				} >&2
			fi
			continue
		fi

		if [[ "${line: -5:5}" = '.flac' ]]; then
			if [[ ${verbose} ]]; then
				echo "${id}: (flac track) = '${line}'" >&2
			fi

			if [[ -f "${line}" ]]; then
				tracks_array=("${tracks_array[@]}" "${line}")
			elif [[ -f "${playlist_file%/*}/${line}" ]]; then
				tracks_array=("${tracks_array[@]}" "${playlist_file%/*}/${line}")
			else
				{
					echo "${script_name}: ERROR: Bad flac entry, line ${id}:"
					echo "   playlist = '${playlist_file}'"
					echo "   entry    = '${line}'"
				} >&2
			fi
			continue
		fi

		if [[ "${line: -4:4}" = '.m3u' ]]; then
			local line_orig="${line}"
			local state_entry="${line#/}"
			state_entry="${state_entry//\//-}"

			if [[ -f "${line}" ]]; then
				:
			elif [[ -f "${playlist_file%/*}/${line}" ]]; then
				line="${playlist_file%/*}/${line}"
			else
				{
					echo "${script_name}: ERROR: Bad m3u entry, line ${id}:"
					echo "   playlist = '${playlist_file}'"
					echo "   entry    = '${line}'"
				} >&2
				continue
			fi

			if [[ ${verbose} ]]; then
				echo "${id}: (playlist) = '${line}'" >&2
			fi

			if find_array_line state_array "${state_entry}"; then
				continue
			fi

			"${SCRIPT_TOP}/${script_name}" ${verbose:+--verbose} ${debug:+--debug} --state-dir=${state_dir} --recurse-count="$(( recurse_count + 1 ))" "${line}"

			if [[ ${got_sig_int} ]]; then
				got_sig_int=''
			else
				if [[ "${verbose}" ]]; then
					echo "Add state: '${state_entry}'" >&2
				fi
				write_state "${state_file}" "${playlist_file}" "${state_entry}"
			fi

			continue
		fi

		echo "${script_name}: ERROR: ${id}: Unknown line type: '${line}'." >&2
	done

	local track_count="${#tracks_array[@]}"

#	echo "track_count = ${track_count}" >&2

	if [[ ${track_count} == 0 ]]; then
		return
	fi

	local -A tags_array
	get_tags_array tracks_array tags_array

	local duration
	duration="$(get_total_duration "${track_count}" tags_array)"

	local term_line
	print_playing "${artist}" "${album}" "${date}" "${duration}" "'${playlist_file}'" term_line

	local print_artist=''
	if [[ "${artist}" == *'Various Artists'* ]]; then
		print_artist=1
	elif [[ "${playlist_file}" == *'Various Artists/'* ]]; then
		print_artist=1
	fi

	print_tracks tags_array "${track_count}" "${print_artist}" "${term_line}"

	mkdir -p "${state_dir}"
	play_tracks tracks_array tags_array "${state_file}" "${playlist_file}"
}

play_top_dir() {
	local top_dir="${1}"
	local state_file="${2}"

# 	echo "top_dir = '${top_dir}'" >&2

	check_top_dir "${top_dir}"

	local -a tracks_array

	readarray -t tracks_array < <(find "${top_dir}" -type f -name '*.flac' -o -name '*.m4a' | sort \
		|| { echo "${script_name}: ERROR: tracks_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
		kill -SIGUSR1 $$; } )

	local track_count="${#tracks_array[@]}"

	if [[ ${track_count} == 0 ]]; then
		return
	fi

	local -A tags_array
	get_tags_array tracks_array tags_array

	local print_artist
	local artist
	if [[ "${top_dir}" == *'Various Artists/'* ]]; then
		print_artist=1
		artist='Various Artists'
	else
		print_artist=''
		artist="${tags_array[1,ARTIST]}"
	fi

	local duration
	duration="$(get_total_duration "${track_count}" tags_array)"

	local term_line
	print_playing "${artist}" "${tags_array[1,ALBUM]}" "${tags_array[1,DATE]}" "${duration}" "'${top_dir}'" term_line

	print_tracks tags_array "${track_count}" "${print_artist}" "${term_line}"

	play_tracks tracks_array tags_array "${state_file}" ''
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"
script_name="${real_source##*/}"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1
trap 'on_sigint' SIGINT

set -eE
set -o pipefail
set -o nounset

shopt -s extglob

source "${SCRIPT_TOP}/audx-lib.sh"

state_dir=''
usage=''
verbose=''
debug=''
recurse_count=0
arg_1=''
last_int=0
got_sig_int=''

process_opts "${@}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

input_type=''

if [[ -d "${arg_1}" ]]; then
	input_type='top_dir'
elif [[ -f "${arg_1}" && "${arg_1##*.}" == 'm3u' ]]; then
	input_type='playlist'
elif [[ -f "${arg_1}" && "${arg_1##*.}" == 'm4a' ]]; then
	input_type='m4a_file'
elif [[ -f "${arg_1}" && "${arg_1##*.}" == 'flac' ]]; then
	input_type='flac_file'
fi

state_dir="${state_dir:-/tmp/audx-state}"

state_file="${arg_1:-${start_time}}.state"
state_file="$(realpath -ms "${state_file}")"
state_file="${state_file#/}"
state_file="${state_file%/*}-${state_file##*/}"
state_file="${state_file//\//-}"
state_file="$(realpath -ms "${state_dir}/${state_file}")"

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

print_project_banner

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'." >&2
	usage
	exit 1
fi

if [[ ${verbose} ]]; then
	echo "${script_name}: INFO: Recurse count = '${recurse_count}'."
fi

if (( recurse_count > 5 )); then
	echo "${script_name}: ERROR: Hit recurse_count: '${recurse_count}'" >&2
	exit 1
fi

exiftool="${exiftool:-exiftool}"
check_program "exiftool" "${exiftool}"

ffplay="${ffplay:-ffplay}"
check_program "ffplay" "${ffplay}"

sox="${sox:-sox}"
check_program "sox" "${sox}"

metaflac="${metaflac:-metaflac}"
check_program "metaflac" "${metaflac}"

if [[ ! ${arg_1} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: No input files." >&2
	usage
	exit 1
fi

arg_1="$(realpath -es "${arg_1}")"

case "${input_type}" in
flac_file | m4a_file)
	play_file "${arg_1}"
	;;
playlist)
	play_playlist "${arg_1}" "${state_file}"
	;;
top_dir)
	play_top_dir "${arg_1}" "${state_file}"
	;;
*)
	echo "${script_name}: ERROR: Unknown input type: '${arg_1}'" >&2
	usage
	exit 1
	;;
esac

trap "on_exit 'Success'" EXIT
exit 0
