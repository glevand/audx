#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Swap FLAC title/artist tags."
		echo "Usage: ${script_name} [flags] <top-dir|file>"
		echo "Option flags:"
		echo "  -t --title-artist - Swap the TITLE and ARTIST tags. Default: '${opt_swap_title_artist}'."
		echo "  -i --cddb         - Change DISCID to CDDB. Default: '${opt_discid_to_cddb}'."
		echo '  -r --rename       - Rename output files ${track}-${artist} - ${title}.'
		echo "  -o --output-dir   - Output directory. Default: '${output_dir}'."
		echo "  -c --clobber      - Overwrite existing files. Default: '${clobber}'."
		echo "  -h --help         - Show this help and exit."
		echo "  -v --verbose      - Verbose execution."
		echo "  -g --debug        - Extra verbose execution."
		echo "  -d --dry-run      - Dry run, don't create/modify files."
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="tiro:chvgd"
	local long_opts="title-artist,cddb,rename,output-dir:,clobber,help,verbose,debug,dry-run"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-t | --title-artist)
			opt_swap_title_artist=1
			shift
			;;
		-i | --cddb)
			opt_discid_to_cddb=1
			shift
			;;
		-r | --rename)
			rename=1
			shift
			;;
		-o | --output-dir)
			output_dir="${2}"
			shift 2
			;;
		-c | --clobber)
			clobber=1
			shift
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		-d | --dry-run)
			dry_run=1
			shift
			;;
		--)
			shift
			arg_1="${1:-}"
			if [[ ${arg_1} ]]; then
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

swap_title_artist() {
	local -n _discid_to_cddb__tags="${1}"

	local tmp="${_discid_to_cddb__tags[TITLE]}"
	_discid_to_cddb__tags[TITLE]="${_discid_to_cddb__tags[ARTIST]}"
	_discid_to_cddb__tags[ARTIST]="${tmp}"
}

discid_to_cddb() {
	local -n _discid_to_cddb__tags="${1}"

	if [[ ${_discid_to_cddb__tags[CDDB]} ]]; then
		if [[ ${verbose} ]]; then
			echo "${script_name}: INFO: Have CDDB=${_discid_to_cddb__tags[CDDB]}" >&2
		fi
		return 1
	fi

	if [[ ! ${_discid_to_cddb__tags[DISCID]} ]]; then
		echo "${script_name}: INFO: No CDDB nor DISCID: '${_discid_to_cddb__tags[file]}'." >&2
		return 1
	fi

	if [[ ${verbose} ]]; then
		echo "${script_name}: Setting CDDB to DISCID ${_discid_to_cddb__tags[DISCID]}: '${_discid_to_cddb__tags[file]}'." >&2
	fi

	_discid_to_cddb__tags[CDDB]="${_discid_to_cddb__tags[DISCID]}"
	return 0
}


#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

opt_swap_title_artist=''
opt_discid_to_cddb=''
rename=''
output_dir="/tmp/audx-switcher-${start_time}"
clobber=''
usage=''
verbose=''
debug=''
dry_run=''
arg_1=''

process_opts "${@}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

in_file=''
top_dir=''

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'" >&2
	usage
	exit 1
fi

if [[ "${opt_swap_title_artist}-${opt_discid_to_cddb}" == '-' ]]; then
	echo "${script_name}: ERROR: No operation flag given." >&2
	usage
	exit 1
fi

if [[ -f "${arg_1}" ]]; then
	in_file="${arg_1}"
elif [[ -d "${arg_1}" ]]; then
	top_dir="${arg_1}"
else
	echo "${script_name}: ERROR: Bad input: '${arg_1}'" >&2
	usage
	exit 1
fi

metaflac="${metaflac:-metaflac}"
check_program "metaflac" "${metaflac}"

if [[ ${top_dir} ]]; then
	echo "${script_name}: INFO: Using top-dir '${top_dir}'." >&2
	check_top_dir "${top_dir}"
	top_dir="$(realpath -e "${top_dir}")"

	readarray -t files_array < <(find "${top_dir}" -type f -name '*.flac' | sort \
		|| { echo "${script_name}: ERROR: files_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
		kill -SIGUSR1 $$; } )
else
	echo "${script_name}: INFO: Using in-file '${in_file}'." >&2
	check_file 'in_file' "${in_file}"
	in_file="$(realpath -e "${in_file}")"
	files_array=("${in_file}")
fi

in_count="${#files_array[@]}"

echo "${script_name}: INFO: Processing ${in_count} input files." >&2

mkdir -p "${output_dir}"

for (( id = 0; id < ${in_count}; id++ )); do
	path="${files_array[$(( id ))]}"
	file="${path##*/}"
	dest="${output_dir}/${file}"
	result=''

	declare -A tags
	flac_fill_tag_set "${path}" tags

	if [[ ${verbose} ]]; then
		{
			echo
			print_tag_set "IN-${id}: " "${file}" tags
			echo
		} >&1
	fi

	if [[ ${opt_swap_title_artist} ]]; then
		result='1'
		swap_title_artist tags

		if [[ ${rename} ]]; then
			# 01-Whats Love Got to Do with It - Tina Turner.flac
			dest="${output_dir}/${tags[TRACKNUMBER]}-${tags[ARTIST]} - ${tags[TITLE]}.flac"
		fi
	fi

	if [[ ${opt_discid_to_cddb} ]]; then
		if discid_to_cddb tags; then
			result='1'
		fi
	fi

	if [[ ${verbose} ]]; then
		{
			echo
			print_tag_set "OUT-${id}: " "${file}" tags

		} >&1
	fi

	if [[ ${result} && ! ${dry_run} ]]; then
		cp -a "${path}" "${dest}"
		flac_write_tag_set "${dest}" tags
	fi
done

echo
echo "${script_name}: INFO: Wrote ${in_count} files to '${output_dir}'" >&2

trap "on_exit 'Success'" EXIT
exit 0
