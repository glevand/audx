#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Write new FLAC metadata tags using --tag, or --tag-name and --tag-value."
		echo "Usage: ${script_name} [flags] <top-dir|file>"
		echo "Option flags:"
		echo "  -t --tag         - Full tag 'NAME=VALUE'. Default='${tag_full}'."
		echo "  -n --tag-name    - Tag name. Default='${tag_name}'."
		echo "  -l --tag-value   - Tag value. Default='${tag_value}'.'"
		echo "  -h --help        - Show this help and exit."
		echo "  -v --verbose     - Verbose execution."
		echo "  -g --debug       - Extra verbose execution."
		echo "  -d --dry-run     - Dry run, don't modify files."
		echo "Common TAGs:"
		echo "  ARTIST"
		echo "  ALBUM"
		echo "  TITLE"
		echo "  GENRE"
		echo "  DATE"
		echo "  TRACKNUMBER"
		echo "  TRACKTOTAL"
		echo "Examples:"
		echo "  ${script_name} \"\${collection}/Phil Collins/No Jacket Required\" --tag='ALBUM=No Jacket Required'"
		echo "  ${script_name} \"\${collection}/Ultravox\" --tag-name='ARTIST' --tag-value='Ultravox'"
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="t:n:l:hvgd"
	local long_opts="tag:,tag-name:,tag-value:,help,verbose,debug,dry-run"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-t | --tag)
			tag_full="${2}"
			shift 2
			;;
		-n | --tag-name)
			tag_name="${2}"
			shift 2
			;;
		-l | --tag-value)
			tag_value="${2}"
			shift 2
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		-d | --dry-run)
			dry_run=1
			shift
			;;
		--)
			shift
			top_dir="${1:-}"
			if [[ ${top_dir} ]]; then
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

tag_full=''
tag_name=''
tag_value=''
usage=''
verbose=''
debug=''
dry_run=''

process_opts "${@}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'" >&2
	usage
	exit 1
fi

if [[ ! ${top_dir} ]]; then
	echo "${script_name}: ERROR: No input file or directory given." >&2
	usage
	exit 1
fi

top_dir="$(realpath -e "${top_dir}")"

if [[ ! -d "${top_dir}" && ! -f "${top_dir}" ]]; then
	echo "${script_name}: ERROR: Bad top-dir: '${top_dir}'" >&2
	usage
	exit 1
fi

metaflac="${metaflac:-metaflac}"
check_program "metaflac" "${metaflac}"

if [[ ${tag_full} ]]; then
	if [[ ${tag_name} ]]; then
		echo "${script_name}: ERROR: Use --tag-full OR --tag-name option." >&2
		usage
		exit 1
	fi
	if [[ ${tag_value} ]]; then
		echo "${script_name}: ERROR: Use --tag-full OR --tag-value option." >&2
		usage
		exit 1
	fi
	check_opt '--tag' "${tag_full}"
	
	declare -A pair

	flac_split_tag "${tag_full}" pair
	
	tag_name="${pair[name]}"
	tag_value="${pair[value]}"
else
	check_opt '--tag OR --tag-name' "${tag_name}"
	check_opt '--tag OR --tag-data' "${tag_data}"
fi

if [[ -d "${top_dir}" ]]; then
	readarray -t path_array < <((cd "${top_dir}" && find . -type f) | sort \
		|| { echo "${script_name}: ERROR: path_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
		kill -SIGUSR1 $$; } )

	if [[ ${dry_run} ]]; then
		echo "${script_name}: INFO: Processing ${#path_array[@]} files (dry-run)." >&2
	else
		echo "${script_name}: INFO: Processing ${#path_array[@]} files." >&2
	fi

	for path in "${path_array[@]}"; do
		path="${path:2}"

		if ! flac_check_file "${top_dir}/${path}" 'quiet'; then
			continue
		fi
		metaflac_retag "${top_dir}/${path}" "${tag_name}" "${tag_value}" 'add'
	done

	if [[ ${dry_run} ]]; then
		echo "${script_name}: INFO: Processed ${#path_array[@]} files (dry-run)." >&2
	else
		echo "${script_name}: INFO: Processed ${#path_array[@]} files." >&2
	fi
else
	flac_check_file "${top_dir}" 'verbose'
	metaflac_retag "${top_dir}" "${tag_name}" "${tag_value}" 'add'

	if [[ ${dry_run} ]]; then
		echo "${script_name}: INFO: Processed 1 file (dry-run)." >&2
	fi
fi

trap "on_exit 'Success'" EXIT
exit 0
