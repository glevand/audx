#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace

	{
		echo "${script_name} - Check vfat file names."
		echo "Usage: ${script_name} [flags] top-dir"
		echo "Option flags:"
		echo "  -d --vfat-dir    - vfat test directory. Default: '${vfat_dir}'."
		echo "  -c --clean-names - Clean file names using standard rules. Default: '${clean_names}'."
		echo "  -h --help        - Show this help and exit."
		echo "  -v --verbose     - Verbose execution."
		echo "  -g --debug       - Extra verbose execution."
		echo "Info:"
		print_project_info
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="d:chvg"
	local long_opts="vfat-dir:,clean-names,help,verbose,debug"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'"
		case "${1}" in
		-d | --vfat-dir)
			vfat_dir="${2}"
			shift 2
			;;
		-c | --clean-names)
			clean_names=1
			shift
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		--)
			shift
			top_dir="${1:-}"
			if [[ ${top_dir} ]]; then
				shift
			fi
			extra_args="${*}"
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

touch_file() {
	local in_file=${1}

	declare -A triple
	path_to_artist_album_title "${in_file}" triple

	if [[ ${clean_names} ]]; then
		triple[ARTIST]="$(clean_vfat_name "${triple[ARTIST]}")"
		triple[ALBUM]="$(clean_vfat_name "${triple[ALBUM]}")"
		triple[TITLE]="$(clean_vfat_name "${triple[TITLE]}")"
	fi

	local out_file
	out_file="${vfat_dir}/${triple[ARTIST]}/${triple[ALBUM]}/${triple[TITLE]}.m4a"

	if [[ ${verbose} ]]; then
		echo "out_file: '${out_file}'" >&2
		#echo "${FUNCNAME[0]}: '${p_script}'" >&2
	fi

	if ! mkdir -p "${out_file%/*}"; then
		{
			echo "${script_name}: ERROR: mkdir '${out_file%/*}'"
			echo "${script_name}: Test file: '${in_file}'"
		} >&2
		exit 1
	fi

	if ! touch "${out_file}"; then
		{
			echo "${script_name}: ERROR: touch '${out_file}'"
			echo "${script_name}: Test file: '${in_file}'"
		} >&2
		exit 1
	fi
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"

SECONDS=0
start_time="$(date +%Y.%m.%d-%H.%M.%S)"

real_source="$(realpath "${BASH_SOURCE}")"
SCRIPT_TOP="$(realpath "${SCRIPT_TOP:-${real_source%/*}}")"

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR
trap 'on_err SIGUSR1 ? 3' SIGUSR1

set -eE
set -o pipefail
set -o nounset

source "${SCRIPT_TOP}/audx-lib.sh"

vfat_dir=''
clean_names=''
usage=''
verbose=''
debug=''

process_opts "${@}"

if [[ -f "${HOME}/.audx.conf" ]]; then
	source "${HOME}/.audx.conf"
fi

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

if [[ ${extra_args} ]]; then
	set +o xtrace
	echo "${script_name}: ERROR: Got extra args: '${extra_args}'" >&2
	usage
	exit 1
fi

check_opt '--vfat-dir' "${vfat_dir}"
check_dir_exists '--vfat-dir' "${vfat_dir}"
vfat_dir="$(realpath -e "${vfat_dir}")"

check_top_dir "${top_dir}"
top_dir="$(realpath -e "${top_dir}")"

print_project_banner >&2

if [[ -d "${vfat_dir}" ]]; then
	rm -rf "${vfat_dir:?}"
fi

mkdir -p "${vfat_dir}"

readarray -t file_array < <( find "${top_dir}" -type f -name '*.flac' | sort \
	|| { echo "${script_name}: ERROR: files_array find failed, function=${FUNCNAME[0]:-main}, line=${LINENO}, result=${?}" >&2; \
	kill -SIGUSR1 $$; } )

echo "${script_name}: INFO: Processing ${#file_array[@]} files." >&2

for (( i = 0; i < ${#file_array[@]}; i++ )); do
	touch_file "${file_array[i]}"
done

echo "${script_name}: INFO: Wrote ${#file_array[@]} m4a files to '${vfat_dir}'" >&2

trap "on_exit 'Success'" EXIT
exit 0
